package org.firstinspires.ftc.teamcode.Autonomous;

import com.qualcomm.robotcore.util.ElapsedTime;

import org.firstinspires.ftc.teamcode.Autonomous.Trajectories.BacksideTrajectories;
import org.firstinspires.ftc.teamcode.Autonomous.Trajectories.BlueBacksideTrajectories;
import org.firstinspires.ftc.teamcode.Autonomous.Trajectories.RedBacksideTrajectories;
import org.firstinspires.ftc.teamcode.Enums.BacksideAutonState;
import org.firstinspires.ftc.teamcode.Enums.ReleaseServoState;
import org.firstinspires.ftc.teamcode.Main.GlobalVariables;
import org.firstinspires.ftc.teamcode.Roadrunner.SampleMecanumDrive;
import org.firstinspires.ftc.teamcode.Subsystems.OldIntake.OldIntakeStateControl;
import org.firstinspires.ftc.teamcode.Subsystems.Outtake.OuttakeConstants;
import org.firstinspires.ftc.teamcode.Subsystems.Outtake.OuttakeDependencies;
import org.firstinspires.ftc.teamcode.Subsystems.Outtake.OuttakeServoControl;
import org.firstinspires.ftc.teamcode.HardwareInterface.SlideLogic;

public class BacksideAuton implements Auton {

    public BacksideAutonState backsideAutonState = BacksideAutonState.goToProp;
    private final SampleMecanumDrive drive;
    private BacksideTrajectories trajectories;
    private boolean wasIfCalled = false;
    private final ElapsedTime elapsedTime = new ElapsedTime();
    private final OldIntakeStateControl oldIntakeStateControl;
    private final SlideLogic slideControl;
    private final OuttakeServoControl outtakeServoControl;
    private double currentWait;

    public BacksideAuton(SampleMecanumDrive drive, OldIntakeStateControl oldIntakeStateControl, OuttakeDependencies outtakeDependencies) {
        this.drive = drive;
        this.oldIntakeStateControl = oldIntakeStateControl;
        this.slideControl = outtakeDependencies.slideControl;
        this.outtakeServoControl = outtakeDependencies.outtakeServoControl;
    }

    @Override
    public void start() {
        setTrajectorySide();
        outtakeServoControl.releaseServoControl(ReleaseServoState.closeBoth); // close both
        outtakeServoControl.releaseServoControl(ReleaseServoState.openSecond); // open second as yellow pixel should be either on the first servo or above it
        drive.setPoseEstimate(trajectories.getStartPose());
        drive.followTrajectorySequenceAsync(trajectories.goToProp());
    }

    @Override
    public void setTrajectorySide() {
        switch (GlobalVariables.alliance) {

            case Red:
                trajectories = new RedBacksideTrajectories(drive, GlobalVariables.propPos);
                break;
            case Blue:
                trajectories = new BlueBacksideTrajectories(drive, GlobalVariables.propPos);
                break;
        }
    }

    @Override
    public void run() {
        switch (backsideAutonState) {
            case goToProp:
                goToProp();
                break;
            case placePropPixel:
                placePropPixel();
                break;
            case goToYellowPixelPlacement:
                goToYellowPixelPlacement();
                break;
            case placeYellowPixel:
                placeYellowPixel();
                break;
            case parkBackstage:
                parkBackstage();
                break;
            case idle:
                break;
        }
    }

    private void goToProp() {
        if (drive.isBusy()) return;

        backsideAutonState = BacksideAutonState.placePropPixel;
        //addWaitTime(AutonomousConstants.propPixelPlaceWait);
        oldIntakeStateControl.pushOut();
    }

    private void placePropPixel() {
        // may need to be replaced upon hardware modifications, currently ejects the pixel from the intake
        if (currentWait > elapsedTime.seconds()) return;

        oldIntakeStateControl.stop();
        backsideAutonState = BacksideAutonState.goToYellowPixelPlacement;
        slideControl.setSlideExtensionTarget(OuttakeConstants.slideCurrentMinExtension);
        drive.followTrajectorySequenceAsync(trajectories.goToYellowPixelPlacement());
    }

    private void goToYellowPixelPlacement() {
        slideControl.updateSlides();
        if (drive.isBusy()) return;

        backsideAutonState = BacksideAutonState.placeYellowPixel;
        addWaitTime(AutonomousConstants.yellowPixelPlaceWait);
        outtakeServoControl.releaseServoControl(ReleaseServoState.openFirst);
    }

    private void placeYellowPixel() {
        slideControl.updateSlides();
        if (currentWait > elapsedTime.seconds()) return;

        backsideAutonState = BacksideAutonState.parkBackstage;
        drive.followTrajectorySequenceAsync(trajectories.parkBackstage());
        addWaitTime(AutonomousConstants.closeSlidesWait);

    }

    private void parkBackstage() {
        if (currentWait > elapsedTime.seconds()) return;

        if (!wasIfCalled) {
            slideControl.setSlideExtensionTarget(0); // retract slides
            wasIfCalled = true;
        }

        slideControl.updateSlides();
        if (drive.isBusy()) return;

        backsideAutonState = BacksideAutonState.idle;
    }

    private void addWaitTime(double waitTime) {
        currentWait = elapsedTime.seconds() + waitTime;
    }
}
