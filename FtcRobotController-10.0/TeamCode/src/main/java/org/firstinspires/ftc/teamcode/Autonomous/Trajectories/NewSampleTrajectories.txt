package org.firstinspires.ftc.teamcode.Autonomous.Trajectories;

import com.acmerobotics.roadrunner.geometry.Pose2d;

import org.firstinspires.ftc.teamcode.Roadrunner.SampleMecanumDrive;
import org.firstinspires.ftc.teamcode.Roadrunner.trajectorysequence.TrajectorySequence;

public class SampleTrajectories {

    SampleMecanumDrive drive;
    TrajectorySequence preloadTrajectory; // place preload and go to first
    TrajectorySequence firstSampleTrajectory; //place first and go to second
    TrajectorySequence secondSampleTrajectory; // place second and go to third
    TrajectorySequence thirdSampleTrajectory; // place third

    private final Pose2d startPose = new Pose2d(-38, -61, Math.toRadians(0));
    public SampleTrajectories(SampleMecanumDrive drive) {
        this.drive = drive;
        fillVariables();
    }

    private void fillVariables() {
        preloadTrajectory = drive.trajectorySequenceBuilder(startPose)
                .waitSeconds(2)
                .lineToLinearHeading(new Pose2d(-55.5, -55.5, Math.toRadians(45)))
                .waitSeconds(1)
                .lineToLinearHeading(new Pose2d(-50, -48,Math.toRadians(90)))
                .build();

        firstSampleTrajectory = drive.trajectorySequenceBuilder(startPose)
                .waitSeconds(1)
                .lineToLinearHeading(new Pose2d(-55.5, -55.5, Math.toRadians(45)))
                .waitSeconds(1)
                .lineToLinearHeading(new Pose2d(-60,-48,Math.toRadians(90)))
                .build();

        secondSampleTrajectory = drive.trajectorySequenceBuilder(startPose)
                .waitSeconds(1)
                .lineToLinearHeading(new Pose2d(-55.5, -55.5, Math.toRadians(45)))
                .waitSeconds(1)
                .lineToLinearHeading(new Pose2d(-55,-47, Math.toRadians(135)))
                .build();

        thirdSampleTrajectory = drive.trajectorySequenceBuilder(startPose)
                .waitSeconds(1)
                .lineToLinearHeading(new Pose2d(-55.5, -55.5, Math.toRadians(45)))
                .build();
    }

    public TrajectorySequence preloadTrajectory() {
        return preloadTrajectory;
    }

    public TrajectorySequence firstSampleTrajectory() {
        return firstSampleTrajectory;
    }

    public TrajectorySequence secondSampleTrajectory() {
        return secondSampleTrajectory;
    }

    public TrajectorySequence thirdSampleTrajectory() {
        return thirdSampleTrajectory;
    }

    public Pose2d getStartPose() {
        return startPose;
    }
}